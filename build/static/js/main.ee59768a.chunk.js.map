{"version":3,"sources":["img/image-rules-bonus-opti.svg","components/Score.js","components/Header.js","components/ButtonChoice.js","components/SetOne.js","components/SetTwo.js","components/Footer.js","gameData.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Score","score","className","Header","ButtonChoice","name","option","isComp","setComp","compChoice","onClick","SetOne","choicesList","choices","map","choice","index","key","SetTwo","user","computer","showResult","result","replay","showCompChoice","setShowCompChoice","useEffect","timerCompChoice","setTimeout","timer","clearTimeout","winCircle","Footer","useState","show","setShow","alt","src","imgRules","data","App","Object","keys","Math","floor","random","length","setChoice","setComputer","setResult","parseInt","localStorage","getItem","setScore","setItem","resultData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ee59768a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image-rules-bonus-opti.a5ea827b.svg\";","import React from 'react';\r\nimport '../styles/Score.scss';\r\n\r\nfunction Score({score}) {\r\n    return(\r\n        <div className=\"score\">\r\n            <p className=\"caption\">score</p>\r\n            <p className=\"number\">{score}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Score;","import React from 'react';\r\nimport Score from './Score';\r\nimport '../styles/Header.scss';\r\n\r\nfunction Header({score}) {\r\n    return(\r\n        <header className=\"container\">\r\n                <h1>Rock <span>Paper</span> <span>scissors</span><span>lizard</span><span>spock</span></h1>\r\n                <Score score={score}/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport '../styles/Button-choice.scss';\r\n\r\nfunction ButtonChoice({name, option, isComp, setComp, compChoice}) {\r\n\r\n    const choice = () => {\r\n        option(name);\r\n        setComp(compChoice);\r\n    };\r\n\r\n    return(\r\n        <button className={`btn-choice ${name} ${isComp ? 'btn-comp' : ''}`} onClick={option ? choice : null}>\r\n            <span className=\"icon\"></span>\r\n            <span className=\"shadow-circle\"></span>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default ButtonChoice;","import React from 'react';\r\nimport ButtonChoice from './ButtonChoice';\r\nimport '../styles/Set-one.scss';\r\n\r\nfunction SetOne({choicesList, option, compChoice, setComp}) {\r\n    const choices = choicesList.map((choice, index) => <div className=\"container-btn\" key={index}><ButtonChoice  name={choice} option={option} compChoice={compChoice} setComp={setComp}/></div>)\r\n\r\n    return(\r\n        <div className=\"set\">\r\n            {choices}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SetOne;","import React, {useEffect} from 'react';\r\nimport ButtonChoice from './ButtonChoice';\r\nimport '../styles/Set-two.scss';\r\n\r\nfunction SetTwo({user, computer, showResult, result, replay, showCompChoice, setShowCompChoice}) {\r\n\r\n\r\n    useEffect(() => {\r\n        \r\n        const timerCompChoice = setTimeout(() => {\r\n            if (user && computer) {\r\n                setShowCompChoice(true);\r\n            }\r\n        }, 500);\r\n       \r\n        const timer = setTimeout(() => {\r\n            if (user && computer) {\r\n                showResult();\r\n            }\r\n        }, 1000);\r\n        return () => clearTimeout(timer, timerCompChoice);\r\n        // eslint-disable-next-line\r\n    }, [computer, user]);\r\n\r\n    const winCircle = (\r\n        <div className=\"circle-win\">\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n        </div>\r\n    )\r\n\r\n    return(\r\n        <div className={`set-two ${result ? 'show-result' : 'container'}`}>\r\n            <div className=\"bloc bloc-user\">\r\n                <h2>You picked</h2>\r\n                <div className={`choice ${result === 'win' ? 'win' : ''}`}>\r\n                    <div className=\"container-btn\">\r\n                        <ButtonChoice  name={user}/>\r\n                    </div>\r\n                    {result === 'win' ? winCircle : null}\r\n                </div>\r\n                \r\n            </div>\r\n            {result && <div className=\"result\">\r\n                <p className=\"text\">{result === 'win' || result === 'lose' ? `You ${result}` : result}</p>\r\n                <button className={`btn-play`} onClick={replay}>Play again</button>\r\n            </div> }\r\n\r\n            <div className=\"bloc bloc-computer\">\r\n                <h2>The house picked</h2>\r\n                <div className={`choice ${result === 'lose' ? 'win' : ''}`}>\r\n                    <div className=\"container-btn\">\r\n                        {showCompChoice ? <ButtonChoice  name={computer} />  : <div className=\"spot\"></div>}\r\n                    </div>\r\n                    {result === 'lose' ? winCircle : null}\r\n                </div>\r\n                \r\n            </div> \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default SetTwo;","import React, {useState} from 'react';\r\nimport imgRules from '../img/image-rules-bonus-opti.svg';\r\nimport '../styles/Footer.scss';\r\n\r\nfunction Footer() {\r\n    const [show, setShow] = useState(false);\r\n    return(\r\n        <footer>\r\n            <button className=\"btn-rules\" onClick={() => setShow(!show)}>Rules</button>\r\n            {show && \r\n                <div className={`modal`} alt=\"rules\">\r\n                    <div className=\"container-title\">\r\n                        <h2>Rules</h2>\r\n                        <button className=\"cross\" onClick={() => setShow(false)}></button>\r\n                    </div>\r\n                    <div className=\"container-img\">\r\n                        <img src={imgRules}  alt=\"buttons about rules\"/>\r\n                    </div>\r\n                </div>\r\n            }\r\n            \r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","const data = {\r\n    'scissors': {\r\n        'paper': {\r\n            result: 'win'\r\n        },\r\n        'scissors': {\r\n            result: 'tie'\r\n        },\r\n        'rock': {\r\n            result: 'lose'\r\n        },\r\n        'lizard': {\r\n            result: 'win'\r\n        },\r\n        'spock': {\r\n            result: 'lose'\r\n        }\r\n    },\r\n    'paper': {\r\n        'paper': {\r\n            result: 'tie'\r\n        },\r\n        'scissors': {\r\n            result: 'lose'\r\n        },\r\n        'rock': {\r\n            result: 'win'\r\n        },\r\n        'lizard': {\r\n            result: 'lose'\r\n        },\r\n        'spock': {\r\n            result: 'win'\r\n        }\r\n    },\r\n    'rock': {\r\n        'paper': {\r\n            result: 'lose'\r\n        },\r\n        'scissors': {\r\n            result: 'win'\r\n        },\r\n        'rock': {\r\n            result: 'tie'\r\n        },\r\n        'lizard': {\r\n            result: 'win'\r\n        },\r\n        'spock': {\r\n            result: 'lose'\r\n        }\r\n    },\r\n    'lizard': {\r\n        'paper': {\r\n            result: 'win'\r\n        },\r\n        'scissors': {\r\n            result: 'lose'\r\n        },\r\n        'rock': {\r\n            result: 'lose'\r\n        },\r\n        'lizard': {\r\n            result: 'tie'\r\n        },\r\n        'spock': {\r\n            result: 'win'\r\n        }\r\n    },\r\n    'spock': {\r\n        'paper': {\r\n            result: 'lose'\r\n        },\r\n        'scissors': {\r\n            result: 'win'\r\n        },\r\n        'rock': {\r\n            result: 'win'\r\n        },\r\n        'lizard': {\r\n            result: 'lose'\r\n        },\r\n        'spock': {\r\n            result: 'tie'\r\n        }\r\n    }\r\n};\r\n\r\nexport default data;\r\n","import React, {useState, useEffect} from 'react';\r\nimport Header from './components/Header';\r\nimport SetOne from './components/SetOne';\r\nimport SetTwo from './components/SetTwo';\r\nimport Footer from './components/Footer';\r\nimport data from './gameData';\r\n\r\nimport './styles/App.scss';\r\n\r\nfunction App() {\r\n\r\n\r\n  const choicesList = Object.keys(data);\r\n  \r\n  const compChoice = choicesList[Math.floor(Math.random() * choicesList.length)];\r\n\r\n  const [user, setChoice] = useState(null);\r\n  const [computer, setComputer] = useState(null);\r\n  const [result, setResult] = useState(null);\r\n  let [score, setScore] = useState(parseInt(localStorage.getItem('score')) || 0);\r\n  const [showCompChoice, setShowCompChoice] = useState(false);\r\n\r\n\r\n  \r\n  const showResult = () => {\r\n    \r\n    const resultData = data[user][computer].result;\r\n\r\n    setResult(resultData);\r\n\r\n    if (resultData === 'win') {\r\n      setScore(score + 1);\r\n    } else if (resultData === 'lose') {\r\n      if (score > 0) {\r\n        setScore(score - 1);\r\n      }\r\n    } else {\r\n      setScore(score);\r\n    }\r\n  \r\n  };\r\n\r\n  const playAgain = () => {\r\n    setChoice(null);\r\n    setComputer(null);\r\n    setResult(null);\r\n    setShowCompChoice(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('score', score);\r\n  }, [score]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header score={score} />\r\n      <main>\r\n        {user ? <SetTwo user={user} compChoice={compChoice} computer={computer} setComp={setComputer} showResult={showResult} result={result} replay={playAgain} showCompChoice={showCompChoice} setShowCompChoice={setShowCompChoice} /> : <SetOne choicesList={choicesList} option={setChoice} compChoice={compChoice} setComp={setComputer}/>}\r\n      </main>   \r\n      <Footer  />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}